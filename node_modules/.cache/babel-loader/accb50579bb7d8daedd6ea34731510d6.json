{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\"; // Reducers\n\nimport { cartReducer } from \"./reducers/cartReducers\";\nimport { getProductDetailsReducer, getProductsReducer } from \"./reducers/productReducers\";\nconst reducer = combineReducers({\n  cart: cartReducer,\n  getProducts: getProductsReducer,\n  getProductDetails: getProductDetailsReducer\n});\nconst middleware = [thunk];\nconst cartFromLocalStorage = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\") || \"\") : [];\nconst INITIAL_STATE = {\n  cart: {\n    cartItems: cartFromLocalStorage\n  }\n};\nconst store = createStore(reducer, INITIAL_STATE, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["F:/VS code/web_shop/frontend/src/redux/store.ts"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","cartReducer","getProductDetailsReducer","getProductsReducer","reducer","cart","getProducts","getProductDetails","middleware","cartFromLocalStorage","localStorage","getItem","JSON","parse","INITIAL_STATE","cartItems","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,wBAAT,EAAkCC,kBAAlC,QAA4D,4BAA5D;AAEA,MAAMC,OAAO,GAAGP,eAAe,CAAC;AAC5BQ,EAAAA,IAAI,EAAEJ,WADsB;AAE5BK,EAAAA,WAAW,EAAEH,kBAFe;AAG5BI,EAAAA,iBAAiB,EAAEL;AAHS,CAAD,CAA/B;AAMA,MAAMM,UAAU,GAAG,CAACT,KAAD,CAAnB;AAEA,MAAMU,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACvBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,EAA3C,CADuB,GAEvB,EAFN;AAIA,MAAMG,aAAa,GAAG;AAClBT,EAAAA,IAAI,EAAE;AACFU,IAAAA,SAAS,EAAEN;AADT;AADY,CAAtB;AAMA,MAAMO,KAAK,GAAGpB,WAAW,CACrBQ,OADqB,EAErBU,aAFqB,EAGrBd,mBAAmB,CAACF,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeQ,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// Reducers\r\nimport { cartReducer } from \"./reducers/cartReducers\";\r\nimport { getProductDetailsReducer,getProductsReducer } from \"./reducers/productReducers\";\r\n\r\nconst reducer = combineReducers({\r\n    cart: cartReducer,\r\n    getProducts: getProductsReducer,\r\n    getProductDetails: getProductDetailsReducer\r\n})\r\n\r\nconst middleware = [thunk]\r\n\r\nconst cartFromLocalStorage = localStorage.getItem(\"cart\")\r\n    ? JSON.parse(localStorage.getItem(\"cart\") || \"\")\r\n    : []\r\n\r\nconst INITIAL_STATE = {\r\n    cart: {\r\n        cartItems: cartFromLocalStorage\r\n    }\r\n}\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    INITIAL_STATE,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store\r\nexport type RootState = ReturnType<typeof reducer>;"]},"metadata":{},"sourceType":"module"}